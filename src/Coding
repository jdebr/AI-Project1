import math
import random
from collections import defaultdict
import matplotlib.pyplot as plt
import numpy as np
from Master import graph
from pygments.lexers.csound import newline


'''
# 2 graph list one having x axis and y axis
graphX = []
graphY = []
'''
#list of lines
lines = []

#a disctionary list containing node id and all the associated edges
edgegraph = defaultdict(list)

# A dictionary having all the random points generated
graph = {}

# A dictionary graph having Euclidean distance as key and coordinates as its elements
calculated_graph = defaultdict(list)


def random_points(n):
    for i in range(n):
        x = random.random()
        y = random.random()
        v = (x,y)
        graph[i] = v
    print(graph)
    '''
    Old School Style
        graphX.append(x)
        graphY.append(y)
    print("X coordinates are - ")
    print(graphX)
    print("Y coordinates are - ")
    print(graphY)
    
    #random points generated above make up the graph 
    
    for i in range(0,10):
        graph[i] = [random.choice(graphX),random.choice(graphY)]
    print("The graph having X and Y coordinates is \n")
    print(graph)
    '''


def distance_calculation():
    for key1, value in graph.items():
            print("Start of Loop")
            x1Coordinate = value[0]
            y1Coordinate = value[1]
            for key2, value in graph.items():
                x2Coordinate = value[0]
                y2Coordinate = value[1]
                if x1Coordinate == x2Coordinate and y1Coordinate == y2Coordinate:
                    print("++++++++++++++++++")
                    print("The Coordinates are same")
                    print("+++++++++++++++++++")
                else:          
                    xPt = (x2Coordinate - x1Coordinate)**2
                    yPt = (y2Coordinate - y1Coordinate)**2
                    calculated_distance =  math.sqrt(xPt+yPt)
                    calculated_graph[key1].append((key2,calculated_distance))
    print(calculated_graph)
    
    for key3, finalvalue in calculated_graph.items():
        finalvalue.sort(key = lambda calculated_distance : calculated_distance[1])
    print(calculated_graph)
            #calculated_graph[calculated_distance].append((x1Coordinate, y1Coordinate,x2Coordinate,y2Coordinate))    
         
def visual_draw():
    for key, value in edgegraph.items():
        print("*****************")
        print(graph[key])
        for i in range(len(value)):
            tempValue = value[i]
            if tempValue == None:
                break
            else:
                plt.plot([graph[key][0],graph[tempValue][0]],[graph[tempValue][1],graph[key][1]],'b-')
                print(graph[tempValue])
    for key, value in graph.items():
        x = value[0]
        y = value[1]
        plt.plot(x,y,'ro')
        #plt.plot([x,y],'b-')
    
    #plt.plot([1,1,2,4], 'b-')    
    plt.axis([0, 1, 0,1 ])
    plt.show()

    
#To draw the edge and find if lines are intersecting or parallel or vertical and join and find edges
def edge_creation():
    
    available_nodes = list(graph.keys())
    while available_nodes:
        # Choose random point from available nodes
        selected_point = random.choice(available_nodes)
        # Boolean to loop until a line is added
        lineAdded = False
        while not lineAdded:
            # If there's no nodes left to check for selected node, remove from 
            # available nodes and exit loop to select a new node
            if not calculated_graph[selected_point] :
                available_nodes.remove(selected_point)
                break
            # Get closest point to our chosen point and remove it from dictionary
            # to indicate we have tried to add an edge to it.  
            else : 
                nearest_point = calculated_graph[selected_point][0][0]
                calculated_graph[selected_point].pop(0)
                
                # if no edge already exists between these points, calculate line equation
                if nearest_point not in edgegraph[selected_point] and selected_point not in edgegraph[nearest_point]:
                    # set coordinates for calculation
                    pt1 = graph[selected_point]
                    pt2 = graph[nearest_point]
                    x1 = pt1[0]
                    y1 = pt1[1]
                    x2 = pt2[0]
                    y2 = pt2[1]
                    
                    # Check if vertical line, might need to handle differently?
                    if x1 == x2:
                        print("Vertical line!")
                        pass
                    # Check if this line will intersect any other edges in graph
                    else:
                        # Calculate values for line Ax + By = C
                        A1 = y2 - y1
                        B1 = x1 - x2
                        C1 = A1 * x1 + B1 * y1
                        # If no edges on graph then no conflict, so add this as first edge
                        if not lines:
                            edgegraph[selected_point].append(nearest_point)
                            lines.append((A1, B1, C1, x1, y1, x2, y2))
                            lineAdded = True
                        # Check all other edges for potential intersection
                        else:
                            intersection_found = False
                            
                            for line in lines:
                                # Retrieve pre-calculated line information
                                A2 = line[0]
                                B2 = line[1]
                                C2 = line[2]
                                x3 = line[3]
                                y3 = line[4]
                                x4 = line[5]
                                y4 = line[6]
                                
                                # Calculate determinant of system
                                det = (A1 * B2) - (A2 * B1)
                                if det == 0:
                                    # edges are parallel
                                    if abs(A1) == abs(A2) and abs(B1) == abs(B2) and abs(C1) == abs(C2):
                                        # edges fall on same line, so check for overlap
                                        if x1 == x3 or x1 == x4 and x2 == x3 or x2 == x4:
                                            # edges are exactly the same
                                            print("Same Line!")
                                            intersection_found = True
                                        elif (x1 > min(x3, x4) and x1 < max(x3, x4)
                                                or x2 > min(x3, x4) and x2 < max(x3, x4)
                                                or x3 > min(x1, x2) and x3 < max(x1, x2)
                                                or x4 > min(x1, x2) and x4 < max(x1, x2)):
                                            # Parallel edges overlap and thus intersect
                                            print("Parallel Overlap!")
                                            intersection_found = True
                                        else:
                                            # Parallel lines don't overlap so we are ok
                                            pass
                                # Calculate point of intersection
                                else:
                                    x = (B2 * C1 - B1 * C2) / det
                                    y = (A1 * C2 - A2 * C1) / det
                                    
                                    # Check if on segment 1
                                    if x > min(x1, x2) and x < max(x1, x2):
                                        if y > min(y1, y2) and y < max(y1, y2):
                                            # Check if on segment 2
                                            if x > min(x3, x4) and x < max(x3, x4):
                                                if y > min(y3, y4) and y < max(y3, y4):
                                                    # this will intersect so move on
                                                    print("Intersection!")
                                                    intersection_found = True
                                                    break
                                                
                            # No intersection so add edge and line
                            if not intersection_found:
                                edgegraph[selected_point].append(nearest_point)
                                lines.append((A1, B1, C1, x1, y1, x2, y2))
                                lineAdded = True                   
    print("+++++++++++++++++++++")
    print(edgegraph.items())
    print("+++++++++++++++++++++")
    print(lines)

def main():

    random_points(10)
    distance_calculation()
    edge_creation()
    visual_draw()
    

if __name__ == '__main__':
    main()
